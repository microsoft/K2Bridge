# Based on https://github.com/algattik/terraform-azure-pipelines-starter/ but simplified to remove separate "terraform plan" stage.

parameters:
  environment: cd
  TerraformVersion: 0.12.18
  TerraformArguments: ''
  TerraformBackendServiceConnection: $(TERRAFORM_SERVICE_CONNECTION)
  TerraformEnvironmentServiceConnection: $(TERRAFORM_SERVICE_CONNECTION)
  TerraformBackendResourceGroup: $(RESOURCE_GROUP)
  TerraformBackendStorageAccount: $(TERRAFORM_STORAGE_ACCOUNT)
  TerraformBackendStorageContainer: terraform
  TerraformBackendLocation: West Europe
  TerraformEnvVariables:

steps:

- task: AzureCLI@1
  displayName: Set up Terraform backend
  # Avoid concurrent Terraform runs on PRs, which would result in failures due to exclusive lock on remote state file.
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), variables['RUN_FLAG_TERRAFORM']))
  inputs:
    azureSubscription: ${{ parameters.TerraformBackendServiceConnection }}
    scriptLocation: inlineScript
    inlineScript: |
      set -eu  # fail on error
      export AZURE_STORAGE_ACCOUNT='${{ parameters.TerraformBackendStorageAccount }}'
      container='${{ parameters.TerraformBackendStorageContainer }}'
      if ! az storage container exists -n "$container" -o none; then
        az configure --defaults group='${{ parameters.TerraformBackendResourceGroup }}' location='${{ parameters.TerraformBackendLocation }}'
        az group create -n '${{ parameters.TerraformBackendResourceGroup }}' -o none
        az storage account create -n "$AZURE_STORAGE_ACCOUNT" -o none
        az storage container create -n "$container" -o none
      fi
      blob='${{ parameters.environment }}.tfstate'
      if [[ $(az storage blob exists -c "$container" -n "$blob" --query exists) = "true" ]]; then
        if [[ $(az storage blob show -c "$container" -n "$blob" --query "properties.lease.status=='locked'") = "true" ]]; then
          echo "State is leased"
          lock_jwt=$(az storage blob show -c "$container" -n "$blob" --query metadata.terraformlockid -o tsv)
          if [ "$lock_jwt" != "" ]; then
            lock_json=$(base64 -d <<< "$lock_jwt")
            echo "State is locked"
            jq . <<< "$lock_json"
          fi
          if [ "${TERRAFORM_BREAK_LEASE:-}" != "" ]; then
            az storage blob lease break -c "$container" -b "$blob"
          else
            echo "If you're really sure you want to break the lease, rerun the pipeline with variable TERRAFORM_BREAK_LEASE set to 1."
            exit 1
          fi
        fi
      fi
    addSpnToEnvironment: true

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: Install Terraform
  inputs:
    terraformVersion: ${{ parameters.TerraformVersion }}

- bash: |
    cp infrastructure/terraform_backend/* infrastructure/terraform
  displayName: Copy terraform backend config to terraform directory
  workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: Terraform init
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/terraform'
    backendServiceArm: '${{ parameters.TerraformBackendServiceConnection }}'
    backendAzureRmResourceGroupName: ${{ parameters.TerraformBackendResourceGroup }}
    backendAzureRmStorageAccountName: ${{ parameters.TerraformBackendStorageAccount }}
    backendAzureRmContainerName: ${{ parameters.TerraformBackendStorageContainer }}
    backendAzureRmKey: ${{ parameters.environment }}.tfstate

# Using AzureCLI instead of Terraform extension because of following issues:
# - https://github.com/microsoft/azure-pipelines-extensions/issues/748
# - https://github.com/microsoft/azure-pipelines-extensions/issues/725
# - https://github.com/microsoft/azure-pipelines-extensions/issues/747
- task: AzureCLI@1
  displayName: Get ARM credentials for Terraform
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), variables['RUN_FLAG_TERRAFORM']))
  inputs:
    azureSubscription: ${{ parameters.TerraformEnvironmentServiceConnection }}
    scriptLocation: inlineScript
    inlineScript: |
      set -eu
      subscriptionId=$(az account show --query id -o tsv)
      echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
      echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$servicePrincipalKey"
      echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
      echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
    addSpnToEnvironment: true

- bash: |
    set -eu
    export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
    terraform plan -input=false -out=tfplan -var environment=${{ parameters.environment }} ${{ parameters.TerraformArguments }}
    terraform apply -auto-approve -input=false tfplan
  displayName: Terraform apply
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), variables['RUN_FLAG_TERRAFORM']))
  workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/terraform
  env:
    ${{ parameters.TerraformEnvVariables }}
